/*
 *              Copyright (c) 2016-2019, Nuralogix Corp.
 *                      All Rights reserved
 *
 *      THIS SOFTWARE IS LICENSED BY AND IS THE CONFIDENTIAL AND
 *      PROPRIETARY PROPERTY OF NURALOGIX CORP. IT IS
 *      PROTECTED UNDER THE COPYRIGHT LAWS OF THE USA, CANADA
 *      AND OTHER FOREIGN COUNTRIES. THIS SOFTWARE OR ANY
 *      PART THEREOF, SHALL NOT, WITHOUT THE PRIOR WRITTEN CONSENT
 *      OF NURALOGIX CORP, BE USED, COPIED, DISCLOSED,
 *      DECOMPILED, DISASSEMBLED, MODIFIED OR OTHERWISE TRANSFERRED
 *      EXCEPT IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF A
 *      NURALOGIX CORP SOFTWARE LICENSE AGREEMENT.
 */
syntax = "proto3";

package dfx.proto.analysis;

service Analysis {
  rpc ListSignals(ListSignalsRequest) returns (ListSignalsResponse) {}
  rpc DescribeSignals(DescribeSignalsRequest) returns (DescribeSignalsResponse) {}
  rpc AnalyzeData(AnalyzeDataRequest) returns (AnalyzeDataResponse) {}
}

// ListSignal
message ListSignalsRequest {}

message ListSignalsResponse {
    repeated string signal_names = 1;
}

// DescribeSignal
message DescribeSignalsRequest {
    repeated string signal_names = 1;
}

message DescribeSignalsResponse {
        repeated SignalDetail signal_details = 1;

    message SignalDetail {
        string signal_name = 1;

        uint32 initial_delay_sec = 2;
        uint32 model_min_sec = 3;

        uint32 min_fps = 4;
        uint32 target_fps = 5;

        string default_model = 6;
        repeated string available_models = 7;

        repeated SignalChannel signal_channels = 8;

        message SignalChannel {
            string roi = 1;
            repeated string channel_names = 2;
        }
    }
}

// AnalyzeData
message AnalyzeDataRequest {
    uint32 fps = 1;
    repeated float timestamps = 2; // if not empty, resample
    repeated Signal signals = 3;
    repeated Channel channels = 4;

    message Signal {
        string signal_name = 1;
        string model_name = 2;
        uint32 resolution = 3;
        bool estimate_confidence = 4;
    }

    message Channel {
        string roi = 1;
        uint32 num_frames = 2; // used for validation
        repeated Dataset datasets = 3;

        message Dataset {
            string channel_name = 1;
            repeated float data = 2;
        }
    }
}

message AnalyzeDataResponse {
    message Result {
        string signal_name = 1;
        string roi = 2;
        string channel_name = 3;
        repeated float data = 4;
        repeated float confidence = 5;
    }

    repeated Result results = 1;
}
