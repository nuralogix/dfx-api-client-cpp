/*
 *              Copyright (c) 2016-2019, Nuralogix Corp.
 *                      All Rights reserved
 *
 *      THIS SOFTWARE IS LICENSED BY AND IS THE CONFIDENTIAL AND
 *      PROPRIETARY PROPERTY OF NURALOGIX CORP. IT IS
 *      PROTECTED UNDER THE COPYRIGHT LAWS OF THE USA, CANADA
 *      AND OTHER FOREIGN COUNTRIES. THIS SOFTWARE OR ANY
 *      PART THEREOF, SHALL NOT, WITHOUT THE PRIOR WRITTEN CONSENT
 *      OF NURALOGIX CORP, BE USED, COPIED, DISCLOSED,
 *      DECOMPILED, DISASSEMBLED, MODIFIED OR OTHERWISE TRANSFERRED
 *      EXCEPT IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF A
 *      NURALOGIX CORP SOFTWARE LICENSE AGREEMENT.
 */
syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "dfx/status/v1/status.proto";
import "dfx/error/v1/error.proto";
import "dfx/chunk/v1/chunk.proto";

option cc_enable_arenas = true;
option java_package = "ai.nuralogix.dfx.measurements.v2";
option java_outer_classname = "Measurements";
option go_package = "bitbucket.org/nuralogix/dfx-protobuffs-go/dfx/measurements/v2;measurements";
option csharp_namespace = "Nuralogix.Dfx.Measurements.V2";

package dfx.measurements.v2;

service API {
  rpc Stream (stream StreamRequest) returns (stream StreamResponse) {}
  rpc Discrete (stream StreamRequest) returns (stream StreamResponse) {}
  rpc List (ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v2/measurements"
    };
  }
  rpc Retrieve (RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      get: "/api/v2/measurements/{id}"
    };
  }
  rpc RetrieveMultiple (RetrieveMultipleRequest) returns (RetrieveMultipleResponse) {
    option (google.api.http) = {
      post: "/api/v2/measurements/retrieve-multiple"
      body: "*"
    };
  }
  rpc GetConfig (GetConfigRequest) returns (GetConfigResponse) {
    option (google.api.http) = {
      post: "/api/v2/measurements/get-config"
      body: "*"
    };
  }
}

// Stream
message StreamRequest {
  message SettingType {
    string study_id = 1;
    string profile_id = 2;
  }
  oneof Data {
    SettingType setting = 1;
    dfx.chunk.v1.ChunkType chunk = 2;
  }
  google.protobuf.Timestamp submitted = 3;
}
message StreamResponse {
  message SettingType {
    string measurement_id = 1;
  }
  message ChunkResultType {
    message SignalGroupResult {
      string signal_name = 1;
      repeated float data = 2;
      float exec_time = 3;
    }
    repeated SignalGroupResult signal_group_results = 1; 
    string face_id = 2;
    google.protobuf.Timestamp frame_end_time = 3;
    uint64 chunk_order = 4;
  }
  oneof Data {
    SettingType setting = 1;
    ChunkResultType chunk_result = 2;
    Metric metric = 3;
    dfx.error.v1.InternalError internal_error = 4; // warning messages from internal services
  }
  google.protobuf.Timestamp submitted = 100;
}

// List
message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
  dfx.status.v1.MeasurementStatus status = 3;
  string profile_id = 4;
  google.protobuf.Timestamp start_date = 5;
  google.protobuf.Timestamp end_date = 6;
}
message ListResponse {
  message Measurement {
    string id = 1;
    dfx.status.v1.MeasurementStatus status = 2;
  }
  uint32 total = 1;
  repeated Measurement measurements = 2;
}

// Retrieve
message RetrieveRequest {
  string id = 1;
}
message RetrieveResponse {
  Measurement measurement = 1;
}

// RetrieveMultiple
message RetrieveMultipleRequest {
  repeated string ids = 1;
}
message RetrieveMultipleResponse {
  repeated Measurement measurements = 1;
}

// GetConfig
message GetConfigRequest {}
message GetConfigResponse {
  message Stream {
    uint32 minimum_update_rate_sec = 1;
  }
  message Process {
    uint32 total_duration_sec = 1;
  }

  Stream stream_config = 1;
  Process process_config = 2;
}

// Measurement object that being used in Retrieve and RetrieveMultiple
message Measurement {
  string id = 1;
  dfx.status.v1.MeasurementStatus status = 2;
  string study_id = 3;
  string device_id = 4;
  string profile_id = 5;
  google.protobuf.Timestamp created = 6;
  google.protobuf.Timestamp updated = 7;
}

message Metric {
  float upload_rate = 1; // measurements computes upload-rate and includes it in the response
}
