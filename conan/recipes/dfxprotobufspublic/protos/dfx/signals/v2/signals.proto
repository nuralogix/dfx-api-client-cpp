/*
 *              Copyright (c) 2016-2019, Nuralogix Corp.
 *                      All Rights reserved
 *
 *      THIS SOFTWARE IS LICENSED BY AND IS THE CONFIDENTIAL AND
 *      PROPRIETARY PROPERTY OF NURALOGIX CORP. IT IS
 *      PROTECTED UNDER THE COPYRIGHT LAWS OF THE USA, CANADA
 *      AND OTHER FOREIGN COUNTRIES. THIS SOFTWARE OR ANY
 *      PART THEREOF, SHALL NOT, WITHOUT THE PRIOR WRITTEN CONSENT
 *      OF NURALOGIX CORP, BE USED, COPIED, DISCLOSED,
 *      DECOMPILED, DISASSEMBLED, MODIFIED OR OTHERWISE TRANSFERRED
 *      EXCEPT IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF A
 *      NURALOGIX CORP SOFTWARE LICENSE AGREEMENT.
 */
syntax = "proto3";

import "google/api/annotations.proto";

option cc_enable_arenas = true;
option java_package = "ai.nuralogix.dfx.signals.v2";
option java_outer_classname = "Signals";
option go_package = "bitbucket.org/nuralogix/dfx-protobuffs-go/dfx/signals/v2;signals";
option csharp_namespace = "Nuralogix.Dfx.Signals.V2";

package dfx.signals.v2;
 
service API {
  rpc Create (CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/v2/signals"
      body: "*"
    };
  }
  rpc Remove (RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {
      delete: "/api/v2/signals/{id}"
    };
  }
  rpc Update (UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/api/v2/signals/{id}"
      body: "*"
    };
  }
  rpc List (ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v2/signals"
    };
  }   
  rpc Retrieve (RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      get: "/api/v2/signals/{id}"
    };
  }
  rpc RetrieveMultiple (RetrieveMultipleRequest) returns (RetrieveMultipleResponse) {
    option (google.api.http) = {
      post: "/api/v2/signals/retrieve-multiple"
      body: "*"
    };
  }
}
 
 enum Category {
  UNKNOWN_SIGNAL_CATEGORY = 0;
  // category for signals that has model implementation
  MODEL = 1;
  // category for signals that were implemented by an in-house algorithm
  ALGORITHM = 2;
  // category for signals that has a classifier in DFX (e.g: AGE, etc)
  CLASSIFIER = 3;
  // category for signals that are derivative of other signals (e.g: BR_ENVELOPE, etc)
  SIGNAL = 4;
  // category for signals that are data sent in the payload that being passed to client
  SOURCE = 5;
}

// Create
message CreateRequest {
  string id = 1;
  Signal signal = 2;
}
message CreateResponse {}

// Remove
message RemoveRequest {
  string id = 1;
}
message RemoveResponse {}

// Update
message UpdateRequest {
  string id = 1;
  Signal signal = 2;
}
message UpdateResponse {}

// List
message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}
message ListResponse {
  message Signal {
    string id = 1;
    string version = 2;
    string name = 3;
    Category signal_category_id = 4;
  }
  uint32 total = 1;
  repeated Signal signals = 2;
}

// Retrieve
message RetrieveRequest {
  string id = 1;
}
message RetrieveResponse {
  Signal signal = 1;
}

// RetrieveMultiple
message RetrieveMultipleRequest {
  repeated string ids = 1;
}
message RetrieveMultipleResponse {
  // map[signalID] -> Signal object
  map<string, Signal> signals = 1;
}

// Signal object being used in Retrieve and RetrieveMultiple EPs
message Signal {
  string name = 1;
  string version = 2;
  string description = 3;
  uint32 initial_delay_sec = 4;
  uint32 model_min_sec = 5;
  string unit = 6;
  double model_min_amplitude = 7;
  double model_max_amplitude = 8;
  double human_min_amplitude = 9;
  double human_max_amplitude = 10;
  Category signal_category_id = 11;
}