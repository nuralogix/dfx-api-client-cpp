/*
 *              Copyright (c) 2016-2019, Nuralogix Corp.
 *                      All Rights reserved
 *
 *      THIS SOFTWARE IS LICENSED BY AND IS THE CONFIDENTIAL AND
 *      PROPRIETARY PROPERTY OF NURALOGIX CORP. IT IS
 *      PROTECTED UNDER THE COPYRIGHT LAWS OF THE USA, CANADA
 *      AND OTHER FOREIGN COUNTRIES. THIS SOFTWARE OR ANY
 *      PART THEREOF, SHALL NOT, WITHOUT THE PRIOR WRITTEN CONSENT
 *      OF NURALOGIX CORP, BE USED, COPIED, DISCLOSED,
 *      DECOMPILED, DISASSEMBLED, MODIFIED OR OTHERWISE TRANSFERRED
 *      EXCEPT IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF A
 *      NURALOGIX CORP SOFTWARE LICENSE AGREEMENT.
 */
syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option java_package = "ai.nuralogix.dfx.devices.v2";
option java_outer_classname = "Devices";
option go_package = "bitbucket.org/nuralogix/dfx-protobuffs-go/dfx/devices/v2;devices";
option csharp_namespace = "Nuralogix.Dfx.Devices.V2";

package dfx.devices.v2;

service API {
  rpc List (ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v2/devices"
    };
  }
  rpc Retrieve (RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      get: "/api/v2/devices/{id}"
    };
  }
  rpc RetrieveMultiple (RetrieveMultipleRequest) returns (RetrieveMultipleResponse) {
    option (google.api.http) = {
      post: "/api/v2/devices/retrieve-multiple"
      body: "*"
    };
  }
  rpc Update (UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/api/v2/devices/{id}"
      body: "*"
    };
  }
  rpc Remove (RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {
      delete: "/api/v2/devices/{id}"
    };
  }
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v2/devices/register"
      body: "*"
    };
  }
  rpc Unregister (UnregisterRequest) returns (UnregisterResponse) {
    option (google.api.http) = {
      post: "/api/v2/devices/unregister"
      body: "*"
    };
  }
}

enum Status {
  UNKNOWN_DEVICE_STATUS = 0;
  ACTIVE = 1;
  INACTIVE = 2;
  DELETED = 3;
}

enum Type {
  UNKNOWN_DEVICE_TYPE = 0;
  
  IPHONE = 1;            // DEPRECATED to disappear in v3
  ANDROID_PHONE = 2;     // DEPRECATED to disappear in v3
  WIN32_DEPRECATED = 3;             // DEPRECATED to disappear in v3
  DARWIN = 4;            // DEPRECATED to disappear in v3
  IPAD = 5;              // DEPRECATED to disappear in v3
  WINDOWS_TABLET = 6;    // DEPRECATED to disappear in v3
  LINUX = 7;             // DEPRECATED to disappear in v3
  DEBIAN = 8;            // DEPRECATED to disappear in v3
  
  // Use types starting from this field
  OTHER = 9;

  WINDOWS_X86 = 100;
  WINDOWS_x64 = 101;
  
  MACOS_X32 = 200;
  MACOS_X64 = 201;
  MACOS_ARM64 = 202;
  
  UBUNTU_X32 = 300;
  UBUNTU_X64 = 301;
  
  LINUX_X32 = 400;
  LINUX_X64 = 401;
  
  IPHONE_ARM32 = 500;
  IPHONE_ARM64 = 501;
  
  IPAD_ARM32 = 600;
  IPAD_ARM64 = 601;
  
  ANDROID_ARM32 = 700;
  ANDROID_ARM64 = 701;
  
  ANDROID_X86 = 800;
  ANDROID_X64 = 801;
}

// Update
message UpdateRequest {
  string id = 1;
  string name = 2;
  Type device_type = 3;
  Status status = 4;
  string identifier = 5;
  string version = 6;
}
message UpdateResponse {}

// List
message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}
message ListResponse {
  message Device {
    string id = 1;
    string name = 2;
  }
  uint32 total = 1;
  repeated Device devices = 2;
}

// Retrieve
message RetrieveRequest {
  string id = 1;
}
message RetrieveResponse {
  Device device = 1;
}

// RetrieveMultiple
message RetrieveMultipleRequest {
  repeated string ids = 1;
}
message RetrieveMultipleResponse {
  repeated Device devices = 1;
}

// Remove
message RemoveRequest {
  string id = 1;
}
message RemoveResponse {}

// Register device
message RegisterRequest {
  string license_id = 1;
  Type device_type = 2;
  string name = 3;
  string identifier = 4;
  string version = 5;
}
message RegisterResponse {
  string device_id = 1;
  string token = 2;
}

// Unregister device
message UnregisterRequest {
  string device_id = 1;
}
message UnregisterResponse {}

// Device object that being used in Retrieve and RetrieveMultiple EPs
message Device {
  string id = 1;
  string name = 2;
  Type device_type = 3;
  Status status = 4;
  string identifier = 5;
  string version = 6;
  google.protobuf.Timestamp created = 7;
  google.protobuf.Timestamp updated = 8;
}