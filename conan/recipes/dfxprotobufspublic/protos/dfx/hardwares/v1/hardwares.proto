/*
 *              Copyright (c) 2016-2019, Nuralogix Corp.
 *                      All Rights reserved
 *
 *      THIS SOFTWARE IS LICENSED BY AND IS THE CONFIDENTIAL AND
 *      PROPRIETARY PROPERTY OF NURALOGIX CORP. IT IS
 *      PROTECTED UNDER THE COPYRIGHT LAWS OF THE USA, CANADA
 *      AND OTHER FOREIGN COUNTRIES. THIS SOFTWARE OR ANY
 *      PART THEREOF, SHALL NOT, WITHOUT THE PRIOR WRITTEN CONSENT
 *      OF NURALOGIX CORP, BE USED, COPIED, DISCLOSED,
 *      DECOMPILED, DISASSEMBLED, MODIFIED OR OTHERWISE TRANSFERRED
 *      EXCEPT IN ACCORDANCE WITH THE TERMS AND CONDITIONS OF A
 *      NURALOGIX CORP SOFTWARE LICENSE AGREEMENT.
 */
syntax = "proto3";

import "google/api/annotations.proto";

option cc_enable_arenas = true;
option java_package = "ai.nuralogix.dfx.hardwares.v1";
option java_outer_classname = "Hardwares";
option go_package = "bitbucket.org/nuralogix/dfx-protobuffs-go/dfx/hardwares/v1;hardwares";
option csharp_namespace = "Nuralogix.Dfx.Hardwares.V1";

package dfx.hardwares.v1;

service API {
  rpc Create (CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/v1/hardwares"
      body: "*"
    };
  }
  rpc Remove (RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {
      delete: "/api/v1/hardwares/{id}"
    };
  }
  rpc Update (UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/api/v1/hardwares/{id}"
      body: "*"
    };
  }
  rpc List (ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v1/hardwares"
    };
  }   
  rpc Retrieve (RetrieveRequest) returns (RetrieveResponse) {
    option (google.api.http) = {
      get: "/api/v1/hardwares/{id}"
    };
  }
  rpc RetrieveMultiple (RetrieveMultipleRequest) returns (RetrieveMultipleResponse) {
    option (google.api.http) = {
      post: "/api/v1/hardwares/retrieve-multiple"
      body: "*"
    };
  }
}

// Create
message CreateRequest {
  Hardware hardware = 1;
}
message CreateResponse {
  string id = 1;
}

// Remove
message RemoveRequest {
  string id = 1;
}
message RemoveResponse {}

// Update
message UpdateRequest {
  string id = 1;
  Hardware hardware = 2;
}
message UpdateResponse {}

// List
message ListRequest {
  uint32 limit = 1;
  uint32 offset = 2;
}
message ListResponse{
  message Hardware {
    string id = 1;
    string name = 2;
    string deployment_version = 3;
    }
  uint32 total = 1;
  repeated Hardware hardwares = 2;
}

// Retrieve
message RetrieveRequest {
  string id = 1;
}
message RetrieveResponse {
  Hardware hardware = 1;
}

// RetrieveMultiple
message RetrieveMultipleRequest {
  repeated string ids = 1;
}
message RetrieveMultipleResponse {
  // map[hardware_id] -> Hardware object
  map<string, Hardware> hardwares = 1;
}

// Hardware object being used in multiple endpoints
message Hardware {
  // hardware name: nuc, lenovo, ...
  string name = 1;
  // hardware study_template_id assigned at the time of benchmarking
  string study_template_id = 2;
  // minumum update-rate in seconds that this hardware can support
  uint32 min_update_rate_sec = 3;
  // maximum number of concurrent clients that can run against this hardware
  uint32 max_concurrent_clients = 4;
  // maximum execution time in seconds among all study-templates assigned for the org at the time of benchmarking
  float max_exec_time_sec = 5;
  // maximum number of analysis pods that can fit into hardware at the time of benchmarking
  uint32 max_num_analysis = 6;
  // total duration (sec) for post processing
  uint32 total_duration_sec = 7;
  // version of dfx-v3 repo that includes details of what are deployed to this hardware
  string deployment_version = 8;
  // description of the hardware
  string description = 9;
}
 